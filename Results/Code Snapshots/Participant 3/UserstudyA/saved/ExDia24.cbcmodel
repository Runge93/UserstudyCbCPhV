<?xml version="1.0" encoding="ASCII"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cbcmodel="http://www.example.org/cbcmodel">
  <cbcmodel:CbCFormula name="FirstExercise">
    <statement name="statement">
      <refinement xsi:type="cbcmodel:CompositionStatement" name="compositionStatement">
        <firstStatement name="statement1">
          <refinement name="j=a.length-1; i=j;" proven="true">
            <postCondition name="j=a.length-1 &amp; i = j"/>
            <preCondition name="a.length >0"/>
          </refinement>
          <postCondition name="j=a.length-1 &amp; i = j"/>
          <preCondition name="a.length >0"/>
        </firstStatement>
        <secondStatement name="statement2">
          <refinement xsi:type="cbcmodel:SmallRepetitionStatement" name="repetitionStatement" preProven="true" postProven="true">
            <postCondition name="\forall int q; ((q >= 0 &amp; q &lt; a.length) -> a[i]>=a[q])"/>
            <preCondition name="j=a.length-1 &amp; i = j"/>
            <loopStatement name="loop">
              <refinement xsi:type="cbcmodel:SelectionStatement" name="selectionStatement" preProve="true">
                <guards name="a[j] > a[i]"/>
                <guards name="a[j] &lt;= a[i]"/>
                <commands name="statement1">
                  <refinement name="i=j;&#xA;j--;">
                    <postCondition name="j>=0&amp;j&lt; a.length &amp; i>=0 &amp; i &lt; a.length"/>
                    <preCondition name="((j>=0&amp;j&lt; a.length &amp; i>=0 &amp; i &lt; a.length) &amp; (j >= 0)) &amp; (a[j] > a[i])"/>
                  </refinement>
                  <postCondition name="j>=0&amp;j&lt; a.length &amp; i>=0 &amp; i &lt; a.length"/>
                  <preCondition name="((j>=0&amp;j&lt; a.length &amp; i>=0 &amp; i &lt; a.length) &amp; (j >= 0)) &amp; (a[j] > a[i])"/>
                </commands>
                <commands name="statement2">
                  <refinement name="i=i;&#xA;j--;">
                    <postCondition name="j>=0&amp;j&lt; a.length &amp; i>=0 &amp; i &lt; a.length"/>
                    <preCondition name="((j>=0&amp;j&lt; a.length &amp; i>=0 &amp; i &lt; a.length) &amp; (j >= 0)) &amp; (a[j] &lt;= a[i])"/>
                  </refinement>
                  <postCondition name="j>=0&amp;j&lt; a.length &amp; i>=0 &amp; i &lt; a.length"/>
                  <preCondition name="((j>=0&amp;j&lt; a.length &amp; i>=0 &amp; i &lt; a.length) &amp; (j >= 0)) &amp; (a[j] &lt;= a[i])"/>
                </commands>
              </refinement>
              <postCondition name="j>=0&amp;j&lt; a.length &amp; i>=0 &amp; i &lt; a.length"/>
              <preCondition name="(j>=0&amp;j&lt; a.length &amp; i>=0 &amp; i &lt; a.length) &amp; (j >= 0)"/>
            </loopStatement>
            <variant name="j - 1"/>
            <invariant name="j>=0&amp;j&lt; a.length &amp; i>=0 &amp; i &lt; a.length"/>
            <guard name="j >= 0"/>
          </refinement>
          <postCondition name="\forall int q; ((q >= 0 &amp; q &lt; a.length) -> a[i]>=a[q])"/>
          <preCondition name="j=a.length-1 &amp; i = j"/>
        </secondStatement>
        <intermediateCondition name="j=a.length-1 &amp; i = j"/>
      </refinement>
      <postCondition name="\forall int q; ((q >= 0 &amp; q &lt; a.length) -> a[i]>=a[q])"/>
      <preCondition name="a.length >0"/>
    </statement>
  </cbcmodel:CbCFormula>
  <cbcmodel:JavaVariables>
    <variables name="int[] a"/>
    <variables name="int i"/>
    <variables name="int j"/>
  </cbcmodel:JavaVariables>
  <cbcmodel:GlobalConditions>
    <conditions name="a != null"/>
    <conditions name="a.length > 0"/>
  </cbcmodel:GlobalConditions>
</xmi:XMI>
